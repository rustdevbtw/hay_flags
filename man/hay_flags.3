.\" generated with Ronn-NG/v0.10.1
.\" http://github.com/apjanke/ronn-ng/tree/0.10.1
.TH "HAY_FLAGS\.H" "3" "August 2024" "The Hay Project" "hay/flags.h"
.SH "NAME"
\fBhay_flags\.h\fR \- Command\-line Flag Parsing Library
.SH "NAME"
\fBhay/flags\fR \- A library for creating, parsing, and handling command\-line flags\.
.SH "SYNOPSIS"
.nf
flag_t *hay_flags_create(const char *name, const char short_name, flag_ty_t type);
int hay_flags_parse(flag_t **flags, int argc, char **argv);
bool hay_flags_getnull(flag_t *flag, const bool defval);
int hay_flags_getint(flag_t *flag, const int defval);
const char *hay_flags_getstr(flag_t *flag, const char *defval);
bool hay_flags_getbool(flag_t *flag, const bool defval);
.fi
.SH "DESCRIPTION"
The \fBhay_flags\fR library provides functions for managing command\-line flags\. It supports creating flags, parsing command\-line arguments, and retrieving flag values\.
.br
A \fBHay Suite\fR project\.
.SS "hay_flags_create()"
\fBSynopsis:\fR
.IP "" 4
.nf
flag_t *hay_flags_create(const char *name, const char short_name, flag_ty_t type);
.fi
.IP "" 0
.P
\fBDescription:\fR
.P
Creates a new flag with the specified name, short name, and type\.
.IP "\(bu" 4
\fBname\fR: The long name of the flag (e\.g\., "verbose")\. This string is duplicated using \fBstrdup\fR, so it should be a valid null\-terminated string\.
.IP "\(bu" 4
\fBshort_name\fR: The short name of the flag (e\.g\., 'v')\. Use 0 if no short name is needed\.
.IP "\(bu" 4
\fBtype\fR: The type of the flag (\fBFT_STR\fR, \fBFT_INT\fR, \fBFT_BOOL\fR)\. Determines how the flag value is stored and processed\.
.IP "" 0
.P
\fBReturns:\fR
.P
A pointer to the newly created \fBflag_t\fR structure, or \fBNULL\fR if an error occurs\. If an error occurs, \fBerrno\fR is set to indicate the error\.
.P
\fBErrors:\fR
.IP "\(bu" 4
\fBEINVAL\fR: Invalid argument provided\.
.IP "\(bu" 4
\fBENOMEM\fR: Memory allocation failed\.
.IP "" 0
.SS "hay_flags_parse()"
\fBSynopsis:\fR
.IP "" 4
.nf
int hay_flags_parse(flag_t **flags, int argc, char **argv);
.fi
.IP "" 0
.P
\fBDescription:\fR
.P
Parses command\-line arguments and sets the corresponding flags\.
.IP "\(bu" 4
\fBflags\fR: Array of pointers to \fBflag_t\fR structures, terminated by \fBNULL\fR\. Each flag in the array is checked against the arguments\.
.IP "\(bu" 4
\fBargc\fR: The number of command\-line arguments\.
.IP "\(bu" 4
\fBargv\fR: The command\-line argument vector\.
.IP "" 0
.P
\fBReturns:\fR
.P
0 on success, or \-1 if an error occurs\. If an error occurs, \fBerrno\fR is set to indicate the error\.
.P
\fBErrors:\fR
.IP "\(bu" 4
\fBEINVAL\fR: Invalid arguments provided\.
.IP "" 0
.SS "hay_flags_getnull()"
\fBSynopsis:\fR
.IP "" 4
.nf
bool hay_flags_getnull(flag_t *flag, const bool defval);
.fi
.IP "" 0
.P
\fBDescription:\fR
.P
Retrieves the value of a null flag or returns a default value\.
.IP "\(bu" 4
\fBflag\fR: Pointer to the \fBflag_t\fR structure to check\.
.IP "\(bu" 4
\fBdefval\fR: Default value to return if the flag is not set or not a null type\.
.IP "" 0
.P
\fBReturns:\fR
.P
\fBtrue\fR if the flag is a null type and is set; otherwise, returns \fBdefval\fR\.
.SS "hay_flags_getint()"
\fBSynopsis:\fR
.IP "" 4
.nf
int hay_flags_getint(flag_t *flag, const int defval);
.fi
.IP "" 0
.P
\fBDescription:\fR
.P
Retrieves the value of an integer flag or returns a default value\.
.IP "\(bu" 4
\fBflag\fR: Pointer to the \fBflag_t\fR structure to check\.
.IP "\(bu" 4
\fBdefval\fR: Default value to return if the flag is not set or not an integer type\.
.IP "" 0
.P
\fBReturns:\fR
.P
The integer value of the flag if set; otherwise, returns \fBdefval\fR\.
.SS "hay_flags_getstr()"
\fBSynopsis:\fR
.IP "" 4
.nf
const char *hay_flags_getstr(flag_t *flag, const char *defval);
.fi
.IP "" 0
.P
\fBDescription:\fR
.P
Retrieves the value of a string flag or returns a default value\.
.IP "\(bu" 4
\fBflag\fR: Pointer to the \fBflag_t\fR structure to check\.
.IP "\(bu" 4
\fBdefval\fR: Default value to return if the flag is not set or not a string type\.
.IP "" 0
.P
\fBReturns:\fR
.P
The string value of the flag if set; otherwise, returns \fBdefval\fR\.
.SS "hay_flags_getbool()"
\fBSynopsis:\fR
.IP "" 4
.nf
bool hay_flags_getbool(flag_t *flag, const bool defval);
.fi
.IP "" 0
.P
\fBDescription:\fR
.P
Retrieves the value of a boolean flag or returns a default value\.
.IP "\(bu" 4
\fBflag\fR: Pointer to the \fBflag_t\fR structure to check\.
.IP "\(bu" 4
\fBdefval\fR: Default value to return if the flag is not set or not a boolean type\.
.IP "" 0
.P
\fBReturns:\fR
.P
The boolean value of the flag if set; otherwise, returns \fBdefval\fR\.
.SH "EXAMPLES"
\fBExample 1: Creating and Parsing Flags\fR
.IP "" 4
.nf
#include <hay/flags\.h>

int main(int argc, char **argv) {
    flag_t *verbose = hay_flags_create("verbose", 'v', FT_BOOL);
    flag_t *count = hay_flags_create("count", 'c', FT_INT);
    flag_t *flags[] = {verbose, count, nullptr}; // You can use nullptr, even in C99, because hay_flags defines it

    if (hay_flags_parse(flags, argc, argv) != 0) {
        perror("hay_flags_parse");
        return EXIT_FAILURE;
    }

    if (hay_flags_getbool(flags[0], false)) {
        printf("Verbose mode enabled\en");
    }

    int count = hay_flags_getint(flags[1], 0);
    printf("Count: %d\en", count);

    hay_flags_destroy(flags[0]);
    hay_flags_destroy(flags[1]);

    return EXIT_SUCCESS;
}
.fi
.IP "" 0
.SH "SEE ALSO"
malloc(3), strdup(3), free(3)
.SH "AUTHOR"
Written by The Hay Project\. Contributions and feedback can be directed to \fInobody@rajdeepm\.xyz\fR\.
.SH "COPYRIGHT"
This manpage is released under the \fBMozilla Public License, version 2\.0\fR License\.
